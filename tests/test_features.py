import unittest

import numpy

from molml.features import BagOfBonds, Connectivity, CoulombMatrix, EncodedBond


METHANE_COORDS = '''
0.99826008 -0.00246000 -0.00436000
2.09021016 -0.00243000 0.00414000
0.63379005 1.02686007 0.00414000
0.62704006 -0.52773003 0.87811010
0.64136006 -0.50747003 -0.90540005
'''
METHANE_COORDS = numpy.array([map(float,x.split()) for x in METHANE_COORDS.strip().split('\n')])
METHANE_ELEMENTS = "C H H H H".strip().split()
METHANE = (METHANE_ELEMENTS, METHANE_COORDS)


BIG_COORDS = '''
-4.577500 -2.027000 0.000100
-3.170600 -2.027000 0.000100
-2.503900 -0.800400 0.000100
-3.258000 0.374300 -0.000100
-4.661200 0.271500 -0.000300
-5.320700 -0.903400 -0.000100
-1.405400 -0.760700 -0.000900
-2.513500 -3.148700 0.000400
-5.243115 -3.143726 0.000200
-4.629817 -3.882282 0.000225
-2.684596 1.541008 -0.000300
-5.814138 1.919458 1.213487
-5.406518 1.336626 -0.000400
-5.819921 1.927685 -1.195717
-6.619470 3.070525 -1.138918
-6.975346 3.579026 0.123745
-6.585259 3.021652 1.286714
-5.522105 1.500109 -2.163583
-5.454672 1.405691 2.352323
-4.624597 1.797860 2.632999
-7.030464 3.657794 -2.223500
-6.076905 4.646253 -2.621712
-6.415463 5.129236 -3.514470
-5.968814 5.371844 -1.842713
-5.132915 4.177431 -2.805889
-7.718078 4.640805 0.228360
-9.070199 4.905679 0.160311
-9.224797 6.330336 0.368614
-7.956294 6.841725 0.550312
-7.010267 5.819401 0.468316
-10.036777 4.061817 -0.048549
-10.929896 3.282089 -0.241536
-11.725464 2.587525 -0.413445
-11.347485 7.546787 0.385857
-10.352686 6.976697 0.377776
-7.456659 8.559162 2.073165
-7.456094 8.020721 0.773377
-6.908266 8.779686 -0.262429
-6.384356 10.039584 0.032126
-6.430989 10.491699 1.363650
-6.955556 9.772640 2.375141
-6.890997 8.392509 -1.291057
-5.955912 11.657573 1.687608
-7.955339 7.890595 3.070357
-8.953881 7.917520 3.023573
-7.644961 6.941155 3.023569
-5.863480 10.784819 -0.897020
-5.382191 11.473417 -1.755551
-4.953470 12.086803 -2.520310
'''
BIG_COORDS = numpy.array([map(float,x.split()) for x in BIG_COORDS.strip().split('\n')])
BIG_ELEMENTS = "C C C C C N H H O H H C C C C C N H O H O C H H H C C C C O C C H N C C C C C C N H H N H H C C H".strip().split()
BIG = (BIG_ELEMENTS, BIG_COORDS)


MID_COORDS = '''
-4.577500 -2.027000 0.000100
-3.170600 -2.027000 0.000100
-2.503900 -0.800400 0.000100
-3.258000 0.374300 -0.000100
-4.661200 0.271500 -2.000300
-5.320700 -0.903400 -2.000100
-4.661200 0.271500 -4.000300
-5.320700 -0.903400 -5.000100
-5.320700 -0.903400 -6.000100
'''
MID_COORDS = numpy.array([map(float,x.split()) for x in MID_COORDS.strip().split('\n')])
MID_ELEMENTS = '''C C O O O O H H H'''.strip().split()
MID = (MID_ELEMENTS, MID_COORDS)

ALL_DATA = [METHANE, MID, BIG]



class ConnectivityTest(unittest.TestCase):
    def test_fit_atom(self):
        a = Connectivity(depth=1)
        a.fit(ALL_DATA)
        self.assertEqual(a._base_chains, 
                        set([('N',), ('C',), ('O',), ('H',)]))

    def test_fit_bond(self):
        a = Connectivity(depth=2)
        a.fit(ALL_DATA)
        self.assertEqual(a._base_chains, 
                        set([('H', 'O'), ('C', 'H'), ('H', 'N'), ('C', 'C'), 
                            ('H', 'H'), ('O', 'O'), ('C', 'N'), ('C', 'O')]))

    def test_fit_angle(self):
        a = Connectivity(depth=3)
        a.fit(ALL_DATA)
        self.assertEqual(a._base_chains, 
                        set([('H', 'N', 'H'), ('C', 'N', 'H'), ('C', 'C', 'O'),
                            ('N', 'C', 'N'), ('C', 'O', 'C'), ('C', 'N', 'C'),
                            ('H', 'C', 'H'), ('C', 'O', 'H'), ('C', 'C', 'C'), 
                            ('C', 'C', 'H'), ('H', 'C', 'O'), ('N', 'C', 'O'), 
                            ('H', 'C', 'N'), ('C', 'C', 'N')]))
        
    def test_fit_dihedral(self):
        # This is to test the double order flipping (CCCH vs HCCC)
        a = Connectivity(depth=4)
        a.fit(ALL_DATA)
        self.assertEqual(a._base_chains,
                        set([('N', 'C', 'N', 'C'), ('C', 'C', 'C', 'O'), 
                            ('H', 'C', 'O', 'C'), ('H', 'C', 'C', 'N'), 
                            ('H', 'C', 'N', 'C'), ('N', 'C', 'C', 'O'), 
                            ('C', 'C', 'C', 'N'), ('H', 'C', 'C', 'H'), 
                            ('C', 'C', 'N', 'C'), ('O', 'C', 'N', 'C'), 
                            ('C', 'C', 'O', 'C'), ('C', 'C', 'C', 'H'), 
                            ('C', 'C', 'C', 'C'), ('H', 'C', 'C', 'O'), 
                            ('C', 'C', 'N', 'H'), ('N', 'C', 'O', 'H'), 
                            ('C', 'C', 'O', 'H'), ('N', 'C', 'N', 'H')]))

    def test_fit_atom_bond(self):
        # This should be the exact same thing as doing it with use_bond_order=False
        a = Connectivity(depth=1, use_bond_order=True)
        a.fit(ALL_DATA)
        self.assertEqual(a._base_chains, 
                        set([('N',), ('C',), ('O',), ('H',)]))
        

    def test_fit_bond_bond(self):
        a = Connectivity(depth=2, use_bond_order=True)
        a.fit(ALL_DATA)
        self.assertEqual(a._base_chains, 
                        set([(('H', 'N', '1'),), (('C', 'N', '3'),), 
                            (('H', 'O', '1'),), (('H', 'H', '1'),), 
                            (('C', 'H', '1'),), (('O', 'O', '1'),), 
                            (('C', 'N', '2'),), (('C', 'O', '1'),), 
                            (('C', 'C', '3'),), (('C', 'N', 'Ar'),), 
                            (('C', 'C', '1'),), (('C', 'O', 'Ar'),), 
                            (('C', 'C', '2'),), (('C', 'C', 'Ar'),)]))

    def test_transform(self):
        a = Connectivity()
        a.fit(ALL_DATA)
        expected_results = numpy.array([[ 0,  1,  0,  4],
                                        [ 0,  2,  3,  2],
                                        [ 5, 25,  4, 15]])
        self.assertTrue((a.transform(ALL_DATA) == expected_results).all())

    def test_small_to_large_transform(self):
        a = Connectivity()
        a.fit([METHANE])
        expected_results = numpy.array([[ 1,  4],
                                        [ 2,  2],
                                        [25, 15]])
        self.assertTrue((a.transform(ALL_DATA) == expected_results).all())

    def test_large_to_small_transform(self):
        a = Connectivity()
        a.fit([BIG])
        expected_results = numpy.array([[ 0,  1,  0,  4],
                                        [ 0,  2,  3,  2],
                                        [ 5, 25,  4, 15]])
        self.assertTrue((a.transform(ALL_DATA) == expected_results).all())

    def test_transform_before_fit(self):
        a = Connectivity()
        with self.assertRaises(ValueError):
            a.transform(ALL_DATA)

    def test_fit_transform(self):
        a = Connectivity()
        expected_results = numpy.array([[ 0,  1,  0,  4],
                                        [ 0,  2,  3,  2],
                                        [ 5, 25,  4, 15]])
        self.assertTrue((a.fit_transform(ALL_DATA) == expected_results).all())



class EncodedBondTest(unittest.TestCase):
    def test_fit(self):
        a = EncodedBond()
        a.fit(ALL_DATA)
        self.assertEqual(a._element_pairs, 
                        set([('H', 'O'), ('O', 'O'), ('N', 'O'), ('C', 'O'), 
                            ('C', 'H'), ('H', 'N'), ('H', 'H'), ('C', 'C'), 
                            ('C', 'N'), ('N', 'N')]))

    def test_transform(self):
        a = EncodedBond()
        a.fit([METHANE])
        expected_results = numpy.array([
            [  3.71282290e-218,   1.29382501e-217,   4.61476555e-217,
               1.68581610e-216,   6.31177515e-216,   2.42370126e-215,
               9.55234655e-215,   3.86699742e-214,   1.60921024e-213,
               6.88941776e-213,   3.03705703e-212,   1.37977660e-211,
               6.46621727e-211,   3.12891791e-210,   1.56485564e-209,
               8.09734424e-209,   4.33980451e-208,   2.41183753e-207,
               1.39151677e-206,   8.34498968e-206,   5.20856442e-205,
               3.38803442e-204,   2.29997919e-203,   1.63185919e-202,
               1.21196379e-201,   9.43715551e-201,   7.71731060e-200,
               6.63938167e-199,   6.02040883e-198,   5.76500417e-197,
               5.84155120e-196,   6.27674976e-195,   7.16784906e-194,
               8.71984390e-193,   1.13283056e-191,   1.57573658e-190,
               2.35315070e-189,   3.78365241e-188,   6.57026619e-187,
               1.23609322e-185,   2.52800827e-184,   5.64038292e-183,
               1.37807312e-181,   3.70163138e-180,   1.09772705e-178,
               3.60998435e-177,   1.32272474e-175,   5.42690793e-174,
               2.50640290e-172,   1.31039432e-170,   7.80178553e-169,
               5.32325492e-167,   4.19060210e-165,   3.83357122e-163,
               4.10650325e-161,   5.19293297e-159,   7.81967702e-157,
               1.41519100e-154,   3.10867962e-152,   8.37618533e-150,
               2.79970681e-147,   1.17488681e-144,   6.27013086e-142,
               4.31437412e-139,   3.88411676e-136,   4.64737205e-133,
               7.51502405e-130,   1.67190228e-126,   5.21556224e-123,
               2.32792683e-119,   1.51881324e-115,   1.48151664e-111,
               2.21236850e-107,   5.18394216e-103,   1.95494721e-098,
               1.21745571e-093,   1.28433508e-088,   2.35167953e-083,
               7.63915416e-078,   4.47964081e-072,   4.79013984e-066,
               9.32602195e-060,   3.24223463e-053,   1.92085175e-046,
               1.77572860e-039,   2.20281543e-032,   2.86597783e-025,
               2.63897000e-018,   9.23293644e-012,   4.58956829e-006,
               6.75821256e-002,   2.33631820e+000,   2.88139070e-003,
               1.03168554e-013,   3.82537479e-037,   1.23005598e-083,
               4.97682272e-173,   0.00000000e+000,   0.00000000e+000,
               0.00000000e+000,   1.16211813e-069,   2.34723917e-069,
               4.80009098e-069,   9.94186690e-069,   2.08621439e-068,
               4.43683915e-068,   9.56684467e-068,   2.09221398e-067,
               4.64251823e-067,   1.04564696e-066,   2.39155599e-066,
               5.55682387e-066,   1.31225046e-065,   3.15102170e-065,
               7.69730304e-065,   1.91378895e-064,   4.84553362e-064,
               1.25001037e-063,   3.28739008e-063,   8.81870705e-063,
               2.41454199e-062,   6.75166695e-062,   1.92936536e-061,
               5.63815529e-061,   1.68609534e-060,   5.16375114e-060,
               1.62074527e-059,   5.21761384e-059,   1.72421767e-058,
               5.85389559e-058,   2.04369200e-057,   7.34351831e-057,
               2.71849400e-056,   1.03782106e-055,   4.09014714e-055,
               1.66590020e-054,   7.02010247e-054,   3.06431616e-053,
               1.38724061e-052,   6.52157711e-052,   3.18796457e-051,
               1.62268961e-050,   8.61279558e-050,   4.77408756e-049,
               2.76790361e-048,   1.68123807e-047,   1.07165629e-046,
               7.18104452e-046,   5.06769904e-045,   3.77344317e-044,
               2.97035469e-043,   2.47678405e-042,   2.19213806e-041,
               2.06376824e-040,   2.07109692e-039,   2.22042240e-038,
               2.54874552e-037,   3.13933077e-036,   4.15840346e-035,
               5.93660540e-034,   9.15343584e-033,   1.52731185e-031,
               2.76286383e-030,   5.42709647e-029,   1.15904381e-027,
               2.69349637e-026,   6.81284621e-025,   1.87465936e-023,
               5.60351259e-022,   1.81450055e-020,   6.33752307e-019,
               2.37215020e-017,   9.42850922e-016,   3.92935943e-014,
               1.68777492e-012,   7.30148304e-011,   3.08522165e-009,
               1.22258929e-007,   4.30560673e-006,   1.25500886e-004,
               2.75527951e-003,   4.01912723e-002,   3.29431875e-001,
               1.21109364e+000,   1.47114183e+000,   3.88635673e-001,
               1.25134271e-002,   2.17975405e-005,   6.45816478e-010,
               6.07521036e-017,   1.50992153e-027,   2.27300581e-043,
               5.65757365e-067,   1.64122859e-102,   5.35965289e-157,
               6.37591306e-243,   0.00000000e+000,   0.00000000e+000,
               0.00000000e+000,   0.00000000e+000]
        ])
        try:
            numpy.testing.assert_array_almost_equal(
                                        a.transform([METHANE]),
                                        expected_results)
        except AssertionError as e:
            self.fail(e)

    def test_large_to_small_transform(self):
        a = EncodedBond()
        a.fit([MID])

        expected_results = numpy.array([
            [  0.00000000e+000] * 100 +
            [  1.16211813e-069,   2.34723917e-069,
               4.80009098e-069,   9.94186690e-069,   2.08621439e-068,
               4.43683915e-068,   9.56684467e-068,   2.09221398e-067,
               4.64251823e-067,   1.04564696e-066,   2.39155599e-066,
               5.55682387e-066,   1.31225046e-065,   3.15102170e-065,
               7.69730304e-065,   1.91378895e-064,   4.84553362e-064,
               1.25001037e-063,   3.28739008e-063,   8.81870705e-063,
               2.41454199e-062,   6.75166695e-062,   1.92936536e-061,
               5.63815529e-061,   1.68609534e-060,   5.16375114e-060,
               1.62074527e-059,   5.21761384e-059,   1.72421767e-058,
               5.85389559e-058,   2.04369200e-057,   7.34351831e-057,
               2.71849400e-056,   1.03782106e-055,   4.09014714e-055,
               1.66590020e-054,   7.02010247e-054,   3.06431616e-053,
               1.38724061e-052,   6.52157711e-052,   3.18796457e-051,
               1.62268961e-050,   8.61279558e-050,   4.77408756e-049,
               2.76790361e-048,   1.68123807e-047,   1.07165629e-046,
               7.18104452e-046,   5.06769904e-045,   3.77344317e-044,
               2.97035469e-043,   2.47678405e-042,   2.19213806e-041,
               2.06376824e-040,   2.07109692e-039,   2.22042240e-038,
               2.54874552e-037,   3.13933077e-036,   4.15840346e-035,
               5.93660540e-034,   9.15343584e-033,   1.52731185e-031,
               2.76286383e-030,   5.42709647e-029,   1.15904381e-027,
               2.69349637e-026,   6.81284621e-025,   1.87465936e-023,
               5.60351259e-022,   1.81450055e-020,   6.33752307e-019,
               2.37215020e-017,   9.42850922e-016,   3.92935943e-014,
               1.68777492e-012,   7.30148304e-011,   3.08522165e-009,
               1.22258929e-007,   4.30560673e-006,   1.25500886e-004,
               2.75527951e-003,   4.01912723e-002,   3.29431875e-001,
               1.21109364e+000,   1.47114183e+000,   3.88635673e-001,
               1.25134271e-002,   2.17975405e-005,   6.45816478e-010,
               6.07521036e-017,   1.50992153e-027,   2.27300581e-043,
               5.65757365e-067,   1.64122859e-102,   5.35965289e-157,
               6.37591306e-243] + 
            [  0.00000000e+000] * 104 +
            [  3.71282290e-218,   1.29382501e-217,   4.61476555e-217,
               1.68581610e-216,   6.31177515e-216,   2.42370126e-215,
               9.55234655e-215,   3.86699742e-214,   1.60921024e-213,
               6.88941776e-213,   3.03705703e-212,   1.37977660e-211,
               6.46621727e-211,   3.12891791e-210,   1.56485564e-209,
               8.09734424e-209,   4.33980451e-208,   2.41183753e-207,
               1.39151677e-206,   8.34498968e-206,   5.20856442e-205,
               3.38803442e-204,   2.29997919e-203,   1.63185919e-202,
               1.21196379e-201,   9.43715551e-201,   7.71731060e-200,
               6.63938167e-199,   6.02040883e-198,   5.76500417e-197,
               5.84155120e-196,   6.27674976e-195,   7.16784906e-194,
               8.71984390e-193,   1.13283056e-191,   1.57573658e-190,
               2.35315070e-189,   3.78365241e-188,   6.57026619e-187,
               1.23609322e-185,   2.52800827e-184,   5.64038292e-183,
               1.37807312e-181,   3.70163138e-180,   1.09772705e-178,
               3.60998435e-177,   1.32272474e-175,   5.42690793e-174,
               2.50640290e-172,   1.31039432e-170,   7.80178553e-169,
               5.32325492e-167,   4.19060210e-165,   3.83357122e-163,
               4.10650325e-161,   5.19293297e-159,   7.81967702e-157,
               1.41519100e-154,   3.10867962e-152,   8.37618533e-150,
               2.79970681e-147,   1.17488681e-144,   6.27013086e-142,
               4.31437412e-139,   3.88411676e-136,   4.64737205e-133,
               7.51502405e-130,   1.67190228e-126,   5.21556224e-123,
               2.32792683e-119,   1.51881324e-115,   1.48151664e-111,
               2.21236850e-107,   5.18394216e-103,   1.95494721e-098,
               1.21745571e-093,   1.28433508e-088,   2.35167953e-083,
               7.63915416e-078,   4.47964081e-072,   4.79013984e-066,
               9.32602195e-060,   3.24223463e-053,   1.92085175e-046,
               1.77572860e-039,   2.20281543e-032,   2.86597783e-025,
               2.63897000e-018,   9.23293644e-012,   4.58956829e-006,
               6.75821256e-002,   2.33631820e+000,   2.88139070e-003,
               1.03168554e-013,   3.82537479e-037,   1.23005598e-083,
               4.97682272e-173] +
            [  0.00000000e+000] * 203
        ])
        try:
            numpy.testing.assert_array_almost_equal(
                                        a.transform([METHANE]),
                                        expected_results)
        except AssertionError as e:
            self.fail(e)

    def test_fit_transform(self):
        a = EncodedBond()
        expected_results = numpy.array([
            [  3.71282290e-218,   1.29382501e-217,   4.61476555e-217,
               1.68581610e-216,   6.31177515e-216,   2.42370126e-215,
               9.55234655e-215,   3.86699742e-214,   1.60921024e-213,
               6.88941776e-213,   3.03705703e-212,   1.37977660e-211,
               6.46621727e-211,   3.12891791e-210,   1.56485564e-209,
               8.09734424e-209,   4.33980451e-208,   2.41183753e-207,
               1.39151677e-206,   8.34498968e-206,   5.20856442e-205,
               3.38803442e-204,   2.29997919e-203,   1.63185919e-202,
               1.21196379e-201,   9.43715551e-201,   7.71731060e-200,
               6.63938167e-199,   6.02040883e-198,   5.76500417e-197,
               5.84155120e-196,   6.27674976e-195,   7.16784906e-194,
               8.71984390e-193,   1.13283056e-191,   1.57573658e-190,
               2.35315070e-189,   3.78365241e-188,   6.57026619e-187,
               1.23609322e-185,   2.52800827e-184,   5.64038292e-183,
               1.37807312e-181,   3.70163138e-180,   1.09772705e-178,
               3.60998435e-177,   1.32272474e-175,   5.42690793e-174,
               2.50640290e-172,   1.31039432e-170,   7.80178553e-169,
               5.32325492e-167,   4.19060210e-165,   3.83357122e-163,
               4.10650325e-161,   5.19293297e-159,   7.81967702e-157,
               1.41519100e-154,   3.10867962e-152,   8.37618533e-150,
               2.79970681e-147,   1.17488681e-144,   6.27013086e-142,
               4.31437412e-139,   3.88411676e-136,   4.64737205e-133,
               7.51502405e-130,   1.67190228e-126,   5.21556224e-123,
               2.32792683e-119,   1.51881324e-115,   1.48151664e-111,
               2.21236850e-107,   5.18394216e-103,   1.95494721e-098,
               1.21745571e-093,   1.28433508e-088,   2.35167953e-083,
               7.63915416e-078,   4.47964081e-072,   4.79013984e-066,
               9.32602195e-060,   3.24223463e-053,   1.92085175e-046,
               1.77572860e-039,   2.20281543e-032,   2.86597783e-025,
               2.63897000e-018,   9.23293644e-012,   4.58956829e-006,
               6.75821256e-002,   2.33631820e+000,   2.88139070e-003,
               1.03168554e-013,   3.82537479e-037,   1.23005598e-083,
               4.97682272e-173,   0.00000000e+000,   0.00000000e+000,
               0.00000000e+000,   1.16211813e-069,   2.34723917e-069,
               4.80009098e-069,   9.94186690e-069,   2.08621439e-068,
               4.43683915e-068,   9.56684467e-068,   2.09221398e-067,
               4.64251823e-067,   1.04564696e-066,   2.39155599e-066,
               5.55682387e-066,   1.31225046e-065,   3.15102170e-065,
               7.69730304e-065,   1.91378895e-064,   4.84553362e-064,
               1.25001037e-063,   3.28739008e-063,   8.81870705e-063,
               2.41454199e-062,   6.75166695e-062,   1.92936536e-061,
               5.63815529e-061,   1.68609534e-060,   5.16375114e-060,
               1.62074527e-059,   5.21761384e-059,   1.72421767e-058,
               5.85389559e-058,   2.04369200e-057,   7.34351831e-057,
               2.71849400e-056,   1.03782106e-055,   4.09014714e-055,
               1.66590020e-054,   7.02010247e-054,   3.06431616e-053,
               1.38724061e-052,   6.52157711e-052,   3.18796457e-051,
               1.62268961e-050,   8.61279558e-050,   4.77408756e-049,
               2.76790361e-048,   1.68123807e-047,   1.07165629e-046,
               7.18104452e-046,   5.06769904e-045,   3.77344317e-044,
               2.97035469e-043,   2.47678405e-042,   2.19213806e-041,
               2.06376824e-040,   2.07109692e-039,   2.22042240e-038,
               2.54874552e-037,   3.13933077e-036,   4.15840346e-035,
               5.93660540e-034,   9.15343584e-033,   1.52731185e-031,
               2.76286383e-030,   5.42709647e-029,   1.15904381e-027,
               2.69349637e-026,   6.81284621e-025,   1.87465936e-023,
               5.60351259e-022,   1.81450055e-020,   6.33752307e-019,
               2.37215020e-017,   9.42850922e-016,   3.92935943e-014,
               1.68777492e-012,   7.30148304e-011,   3.08522165e-009,
               1.22258929e-007,   4.30560673e-006,   1.25500886e-004,
               2.75527951e-003,   4.01912723e-002,   3.29431875e-001,
               1.21109364e+000,   1.47114183e+000,   3.88635673e-001,
               1.25134271e-002,   2.17975405e-005,   6.45816478e-010,
               6.07521036e-017,   1.50992153e-027,   2.27300581e-043,
               5.65757365e-067,   1.64122859e-102,   5.35965289e-157,
               6.37591306e-243,   0.00000000e+000,   0.00000000e+000,
               0.00000000e+000,   0.00000000e+000]])
        try:
            numpy.testing.assert_array_almost_equal(
                                        a.fit_transform([METHANE]),
                                        expected_results)
        except AssertionError as e:
            self.fail(e)

    def test_transform_before_fit(self):
        a = EncodedBond()
        with self.assertRaises(ValueError):
            a.transform(ALL_DATA)




class CoulombMatrixTest(unittest.TestCase):
    def test_fit(self):
        a = CoulombMatrix()
        a.fit(ALL_DATA)
        self.assertEqual(a._max_size, 49)

    def test_transform(self):
        a = CoulombMatrix()
        a.fit([METHANE])
        expected_results = numpy.array([
            [  36.8581052 ,   5.49459021,   5.49462885,   5.4945    ,
                5.49031286,   5.49459021,   0.5       ,   0.56071947,
                0.56071656,   0.56064037,   5.49462885,   0.56071947,
                0.5       ,   0.56071752,   0.56064089,   5.4945    ,
                0.56071656,   0.56071752,   0.5       ,   0.56063783,
                5.49031286,   0.56064037,   0.56064089,   0.56063783,   
                0.5]])
        try:
            numpy.testing.assert_array_almost_equal(
                                        a.transform([METHANE]),
                                        expected_results)
        except AssertionError as e:
            self.fail(e)

    def test_small_to_large_transform(self):
        a = CoulombMatrix()
        a.fit([METHANE])
        with self.assertRaises(ValueError):
            a.transform(ALL_DATA)

    def test_large_to_small_transform(self):
        a = CoulombMatrix()
        a.fit([MID])

        expected_results = numpy.array([
            [ 36.8581052 ,   5.49459021,   5.49462885,   5.4945    ,
               5.49031286,   0.        ,   0.        ,   0.        ,
               0.        ,   5.49459021,   0.5       ,   0.56071947,
               0.56071656,   0.56064037,   0.        ,   0.        ,
               0.        ,   0.        ,   5.49462885,   0.56071947,
               0.5       ,   0.56071752,   0.56064089,   0.        ,
               0.        ,   0.        ,   0.        ,   5.4945    ,
               0.56071656,   0.56071752,   0.5       ,   0.56063783,
               0.        ,   0.        ,   0.        ,   0.        ,
               5.49031286,   0.56064037,   0.56064089,   0.56063783,
               0.5] + [0.0] * 40
        ])
        try:
            numpy.testing.assert_array_almost_equal(
                                        a.transform([METHANE]),
                                        expected_results)
        except AssertionError as e:
            self.fail(e)


    def test_transform_before_fit(self):
        a = CoulombMatrix()
        with self.assertRaises(ValueError):
            a.transform(ALL_DATA)

    def test_fit_transform(self):
        a = CoulombMatrix()
        expected_results = numpy.array([
            [  36.8581052 ,   5.49459021,   5.49462885,   5.4945    ,
                5.49031286,   5.49459021,   0.5       ,   0.56071947,
                0.56071656,   0.56064037,   5.49462885,   0.56071947,
                0.5       ,   0.56071752,   0.56064089,   5.4945    ,
                0.56071656,   0.56071752,   0.5       ,   0.56063783,
                5.49031286,   0.56064037,   0.56064089,   0.56063783,   
                0.5]])
        try:
            numpy.testing.assert_array_almost_equal(
                                        a.fit_transform([METHANE]),
                                        expected_results)
        except AssertionError as e:
            self.fail(e)



class BagOfBondsTest(unittest.TestCase):
    def test_fit(self):
        a = BagOfBonds()
        a.fit([METHANE])
        expected_results = {
            ('C', 'H'): 4, 
            ('H', 'H'): 6,
        }
        self.assertEqual(a._bag_sizes, expected_results)

    def test_fit_multi_mol(self):
        a = BagOfBonds()
        a.fit(ALL_DATA)
        expected_results = {
            ('H', 'O'): 60,
            ('C', 'H'): 375,
            ('H', 'N'): 75,
            ('C', 'C'): 300,
            ('H', 'H'): 105,
            ('O', 'O'): 6,
            ('C', 'N'): 125,
            ('N', 'O'): 20,
            ('C', 'O'): 100,
            ('N', 'N'): 10,
        }
        self.assertEqual(a._bag_sizes, expected_results)

    def test_transform(self):
        a = BagOfBonds()
        a.fit([METHANE])
        expected_results = numpy.array([
            [ 0.56071947,  0.56071752,  0.56071656,  0.56064089,  0.56064037,
              0.56063783,  5.49462885,  5.49459021,  5.4945    ,  5.49031286]
        ])
        try:
            numpy.testing.assert_array_almost_equal(
                                        a.transform([METHANE]),
                                        expected_results)
        except AssertionError as e:
            self.fail(e)

    def test_small_to_large_transform(self):
        a = BagOfBonds()
        a.fit([METHANE])
        with self.assertRaises(ValueError):
            a.transform(ALL_DATA)

    def test_large_to_small_transform(self):
        a = BagOfBonds()
        a.fit([BIG])

        expected_results = numpy.array([
            [0.0] * 60 + 
            [5.494628848219048, 5.494590213211275, 5.494499999706413, 
            5.49031286145183] +
            [0.0] * 746 +
            [0.5607194714171738, 0.5607175240809282, 0.5607165613824526, 
            0.5606408892793993, 0.5606403708987712, 0.560637829974531] + 
            [0.0] * 360
            ])
        try:
            numpy.testing.assert_array_almost_equal(
                                        a.transform([METHANE]),
                                        expected_results)
        except AssertionError as e:
            self.fail(e)

    def test_transform_before_fit(self):
        a = BagOfBonds()
        with self.assertRaises(ValueError):
            a.transform(ALL_DATA)



if __name__ == '__main__':
    unittest.main()